{
  "completions": [
    {
      "display": "randint",
      "insert": "randint",
      "hint": "function",
      "documentation_text": "Return a random integer N such that a \u003c= N \u003c= b .",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.randint",
        "name": "randint",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "choice",
      "insert": "choice",
      "hint": "function",
      "documentation_text": "Return a random element from the non-empty sequence seq . If seq is empty, raises IndexError ( #exceptions.IndexError ) .",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.choice",
        "name": "choice",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "random",
      "insert": "random",
      "hint": "function",
      "documentation_text": "random() -\u003e x in the interval [0, 1).",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.random",
        "name": "random",
        "namespace": null,
        "value": [
          {
            "id": "python;_random.Random.random",
            "kind": "function",
            "repr": "_random.Random.random",
            "type": "",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "randrange",
      "insert": "randrange",
      "hint": "function",
      "documentation_text": "Return a randomly selected element from range(start, stop, step) . This is equivalent to choice(range(start, stop, step)) , but doesn’t actually build a range object.\n\nNew in version 1.5.2.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.randrange",
        "name": "randrange",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "shuffle",
      "insert": "shuffle",
      "hint": "function",
      "documentation_text": "Shuffle the sequence x in place. The optional argument random is a 0-argument function returning a random float in [0.0, 1.0); by default, this is the function random() .\n\nNote that for even rather small len(x) , the total number of permutations of x is larger than the period of most random number generators; this implies that most permutations of a long sequence can never be generated.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.shuffle",
        "name": "shuffle",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "uniform",
      "insert": "uniform",
      "hint": "function",
      "documentation_text": "Return a random floating point number N such that a \u003c= N \u003c= b for a \u003c= b and b \u003c= N \u003c= a for b \u003c a .\n\nThe end-point value b may or may not be included in the range depending on floating-point rounding in the equation a + (b-a) * random() .",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.uniform",
        "name": "uniform",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "sample",
      "insert": "sample",
      "hint": "function",
      "documentation_text": "Return a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement.\n\nNew in version 2.3.\n\nReturns a new list containing elements from the population while leaving the original population unchanged. The resulting list is in selection order so that all sub-slices will also be valid random samples. This allows raffle winners (the sample) to be partitioned into grand prize and second place winners (the subslices).\n\nMembers of the population need",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.sample",
        "name": "sample",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "seed",
      "insert": "seed",
      "hint": "function",
      "documentation_text": "Initialize the basic random number generator. Optional argument x can be any hashable object. If x is omitted or None , current system time is used; current system time is also used to initialize the generator when the module is first imported. If randomness sources are provided by the operating system, they are used instead of the system time (see the os.urandom() ( #os.urandom ) function for details on availability).\n\nChanged in version 2.4: formerly, operating system resources were not used.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.seed",
        "name": "seed",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "Random",
      "insert": "Random",
      "hint": "type",
      "documentation_text": "Random number generator base class used by bound module functions.\n\nUsed to instantiate instances of Random to get generators that don't share state. Especially useful for multi-threaded programs, creating a different instance of Random for each thread, and using the jumpahead() method to ensure that the generated sequences seen by each thread don't overlap.\n\nClass Random can also be subclassed if you want to use a different basic generator of your own devising: in that case, override the following",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.Random",
        "name": "Random",
        "namespace": null,
        "value": [
          {
            "id": "python;random.Random",
            "kind": "type",
            "repr": "random.Random",
            "type": "type",
            "type_id": "python;__builtin__.type"
          }
        ]
      }
    },
    {
      "display": "gauss",
      "insert": "gauss",
      "hint": "function",
      "documentation_text": "Gaussian distribution. mu is the mean, and sigma is the standard deviation. This is slightly faster than the normalvariate() ( #random.normalvariate ) function defined below.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.gauss",
        "name": "gauss",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "SystemRandom",
      "insert": "SystemRandom",
      "hint": "type",
      "documentation_text": "Class that uses the os.urandom() ( #os.urandom ) function for generating random numbers from sources provided by the operating system. Not available on all systems. Does not rely on software state and sequences are not reproducible. Accordingly, the seed() ( #random.seed ) and jumpahead() ( #random.jumpahead ) methods have no effect and are ignored. The getstate() ( #random.getstate ) and setstate() ( #random.setstate ) methods raise NotImplementedError ( #exceptions.NotImplementedError ) if called.\n\nNew",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.SystemRandom",
        "name": "SystemRandom",
        "namespace": null,
        "value": [
          {
            "id": "python;random.SystemRandom",
            "kind": "type",
            "repr": "random.SystemRandom",
            "type": "type",
            "type_id": "python;__builtin__.type"
          }
        ]
      }
    },
    {
      "display": "getrandbits",
      "insert": "getrandbits",
      "hint": "function",
      "documentation_text": "getrandbits(k) -\u003e x. Generates a long int with k random bits.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.getrandbits",
        "name": "getrandbits",
        "namespace": null,
        "value": [
          {
            "id": "python;_random.Random.getrandbits",
            "kind": "function",
            "repr": "_random.Random.getrandbits",
            "type": "",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "normalvariate",
      "insert": "normalvariate",
      "hint": "function",
      "documentation_text": "Normal distribution. mu is the mean, and sigma is the standard deviation.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.normalvariate",
        "name": "normalvariate",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "expovariate",
      "insert": "expovariate",
      "hint": "function",
      "documentation_text": "Exponential distribution. lambd is 1.0 divided by the desired mean. It should be nonzero. (The parameter would be called “lambda”, but that is a reserved word in Python.) Returned values range from 0 to positive infinity if lambd is positive, and from negative infinity to 0 if lambd is negative.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.expovariate",
        "name": "expovariate",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "WichmannHill",
      "insert": "WichmannHill",
      "hint": "type",
      "documentation_text": "Class that implements the Wichmann-Hill algorithm as the core generator. Has all of the same methods as Random plus the whseed() method described below. Because this class is implemented in pure Python, it is not threadsafe and may require locks between calls. The period of the generator is 6,953,607,871,644 which is small enough to require care that two independent random sequences do not overlap.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.WichmannHill",
        "name": "WichmannHill",
        "namespace": null,
        "value": [
          {
            "id": "python;random.WichmannHill",
            "kind": "type",
            "repr": "random.WichmannHill",
            "type": "type",
            "type_id": "python;__builtin__.type"
          }
        ]
      }
    },
    {
      "display": "triangular",
      "insert": "triangular",
      "hint": "function",
      "documentation_text": "Return a random floating point number N such that low \u003c= N \u003c= high and with the specified mode between those bounds. The low and high bounds default to zero and one. The mode argument defaults to the midpoint between the bounds, giving a symmetric distribution.\n\nNew in version 2.6.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.triangular",
        "name": "triangular",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "getstate",
      "insert": "getstate",
      "hint": "function",
      "documentation_text": "Return an object capturing the current internal state of the generator. This object can be passed to setstate() ( #random.setstate ) to restore the state.\n\nNew in version 2.1.\n\nChanged in version 2.6: State values produced in Python 2.6 cannot be loaded into earlier versions.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.getstate",
        "name": "getstate",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "setstate",
      "insert": "setstate",
      "hint": "function",
      "documentation_text": "state should have been obtained from a previous call to getstate() ( #random.getstate ) , and setstate() ( #random.setstate ) restores the internal state of the generator to what it was at the time getstate() ( #random.getstate ) was called.\n\nNew in version 2.1.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.setstate",
        "name": "setstate",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "betavariate",
      "insert": "betavariate",
      "hint": "function",
      "documentation_text": "Beta distribution. Conditions on the parameters are alpha \u003e 0 and beta \u003e 0 . Returned values range between 0 and 1.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.betavariate",
        "name": "betavariate",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "gammavariate",
      "insert": "gammavariate",
      "hint": "function",
      "documentation_text": "Gamma distribution. ( Not the gamma function!) Conditions on the parameters are alpha \u003e 0 and beta \u003e 0 .\n\nThe probability distribution function is:\n\nx ** (alpha - 1) * math.exp(-x / beta) pdf(x) = -------------------------------------- math.gamma(alpha) * beta ** alpha",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.gammavariate",
        "name": "gammavariate",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "lognormvariate",
      "insert": "lognormvariate",
      "hint": "function",
      "documentation_text": "Log normal distribution. If you take the natural logarithm of this distribution, you’ll get a normal distribution with mean mu and standard deviation sigma . mu can have any value, and sigma must be greater than zero.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.lognormvariate",
        "name": "lognormvariate",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "paretovariate",
      "insert": "paretovariate",
      "hint": "function",
      "documentation_text": "Pareto distribution. alpha is the shape parameter.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.paretovariate",
        "name": "paretovariate",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "vonmisesvariate",
      "insert": "vonmisesvariate",
      "hint": "function",
      "documentation_text": "mu is the mean angle, expressed in radians between 0 and 2* pi , and kappa is the concentration parameter, which must be greater than or equal to zero. If kappa is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2* pi .",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.vonmisesvariate",
        "name": "vonmisesvariate",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "weibullvariate",
      "insert": "weibullvariate",
      "hint": "function",
      "documentation_text": "Weibull distribution. alpha is the scale parameter and beta is the shape parameter.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.weibullvariate",
        "name": "weibullvariate",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "TWOPI",
      "insert": "TWOPI",
      "hint": "float",
      "documentation_text": "No documentation available",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.TWOPI",
        "name": "TWOPI",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "instance",
            "repr": "float",
            "type": "float",
            "type_id": "python;__builtin__.float"
          }
        ]
      }
    },
    {
      "display": "jumpahead",
      "insert": "jumpahead",
      "hint": "function",
      "documentation_text": "Change the internal state to one different from and likely far away from the current state. n is a non-negative integer which is used to scramble the current state vector. This is most useful in multi-threaded programs, in conjunction with multiple instances of the Random class: setstate() ( #random.setstate ) or seed() ( #random.seed ) can be used to force all instances into the same internal state, and then jumpahead() ( #random.jumpahead ) can be used to force the instances’ states far apart.\n\nNew",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.jumpahead",
        "name": "jumpahead",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "function",
            "repr": "",
            "type": "instancemethod",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "LOG4",
      "insert": "LOG4",
      "hint": "float",
      "documentation_text": "No documentation available",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.LOG4",
        "name": "LOG4",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "instance",
            "repr": "float",
            "type": "float",
            "type_id": "python;__builtin__.float"
          }
        ]
      }
    },
    {
      "display": "NV_MAGICCONST",
      "insert": "NV_MAGICCONST",
      "hint": "float",
      "documentation_text": "No documentation available",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.NV_MAGICCONST",
        "name": "NV_MAGICCONST",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "instance",
            "repr": "float",
            "type": "float",
            "type_id": "python;__builtin__.float"
          }
        ]
      }
    },
    {
      "display": "SG_MAGICCONST",
      "insert": "SG_MAGICCONST",
      "hint": "float",
      "documentation_text": "No documentation available",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.SG_MAGICCONST",
        "name": "SG_MAGICCONST",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "instance",
            "repr": "float",
            "type": "float",
            "type_id": "python;__builtin__.float"
          }
        ]
      }
    },
    {
      "display": "RECIP_BPF",
      "insert": "RECIP_BPF",
      "hint": "float",
      "documentation_text": "No documentation available",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.RECIP_BPF",
        "name": "RECIP_BPF",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "instance",
            "repr": "float",
            "type": "float",
            "type_id": "python;__builtin__.float"
          }
        ]
      }
    },
    {
      "display": "_urandom",
      "insert": "_urandom",
      "hint": "function",
      "documentation_text": "urandom(n) -\u003e str\n\nReturn n random bytes suitable for cryptographic use.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._urandom",
        "name": "_urandom",
        "namespace": null,
        "value": [
          {
            "id": "python;posix.urandom",
            "kind": "function",
            "repr": "posix.urandom",
            "type": "builtin_function_or_method",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "BPF",
      "insert": "BPF",
      "hint": "int",
      "documentation_text": "Invalid request descriptor",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.BPF",
        "name": "BPF",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "instance",
            "repr": "int",
            "type": "int",
            "type_id": "python;__builtin__.int"
          }
        ]
      }
    },
    {
      "display": "_inst",
      "insert": "_inst",
      "hint": "random.Random",
      "documentation_text": "No documentation available",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._inst",
        "name": "_inst",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "instance",
            "repr": "",
            "type": "Random",
            "type_id": "python;random.Random"
          }
        ]
      }
    },
    {
      "display": "_ceil",
      "insert": "_ceil",
      "hint": "function",
      "documentation_text": "Return the ceiling of x as a float, the smallest integer value greater than or equal to x .",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._ceil",
        "name": "_ceil",
        "namespace": null,
        "value": [
          {
            "id": "python;math.ceil",
            "kind": "function",
            "repr": "math.ceil",
            "type": "builtin_function_or_method",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_log",
      "insert": "_log",
      "hint": "function",
      "documentation_text": "With one argument, return the natural logarithm of x (to base e ).\n\nWith two arguments, return the logarithm of x to the given base , calculated as log(x)/log(base) .\n\nChanged in version 2.3: base argument added.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._log",
        "name": "_log",
        "namespace": null,
        "value": [
          {
            "id": "python;math.log",
            "kind": "function",
            "repr": "math.log",
            "type": "builtin_function_or_method",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "division",
      "insert": "division",
      "hint": "object",
      "documentation_text": "No documentation available",
      "documentation_html": "",
      "symbol": {
        "id": "python;random.division",
        "name": "division",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "instance",
            "repr": "",
            "type": "",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_BuiltinMethodType",
      "insert": "_BuiltinMethodType",
      "hint": "type",
      "documentation_text": "The type of built-in functions like len() or sys.exit() ( #sys.exit ) , and methods of built-in classes. (Here, the term “built-in” means “written in C”.)",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._BuiltinMethodType",
        "name": "_BuiltinMethodType",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "type",
            "repr": "builtin_function_or_method",
            "type": "type",
            "type_id": "python;__builtin__.type"
          }
        ]
      }
    },
    {
      "display": "_MethodType",
      "insert": "_MethodType",
      "hint": "type",
      "documentation_text": "This function will return a method object, bound to instance , or unbound if instance is None . function must be callable.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._MethodType",
        "name": "_MethodType",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "type",
            "repr": "instancemethod",
            "type": "type",
            "type_id": "python;__builtin__.type"
          }
        ]
      }
    },
    {
      "display": "_acos",
      "insert": "_acos",
      "hint": "function",
      "documentation_text": "Return the arc cosine of x , in radians.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._acos",
        "name": "_acos",
        "namespace": null,
        "value": [
          {
            "id": "python;math.acos",
            "kind": "function",
            "repr": "math.acos",
            "type": "builtin_function_or_method",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_cos",
      "insert": "_cos",
      "hint": "function",
      "documentation_text": "Return the cosine of x radians.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._cos",
        "name": "_cos",
        "namespace": null,
        "value": [
          {
            "id": "python;math.cos",
            "kind": "function",
            "repr": "math.cos",
            "type": "builtin_function_or_method",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_e",
      "insert": "_e",
      "hint": "float",
      "documentation_text": "The mathematical constant e = 2.718281..., to available precision.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._e",
        "name": "_e",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "instance",
            "repr": "float",
            "type": "float",
            "type_id": "python;__builtin__.float"
          }
        ]
      }
    },
    {
      "display": "_exp",
      "insert": "_exp",
      "hint": "function",
      "documentation_text": "Return e**x .",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._exp",
        "name": "_exp",
        "namespace": null,
        "value": [
          {
            "id": "python;math.exp",
            "kind": "function",
            "repr": "math.exp",
            "type": "builtin_function_or_method",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_hashlib",
      "insert": "_hashlib",
      "hint": "module",
      "documentation_text": "hashlib module - A common interface to many hash functions.\n\nnew(name, string='') - returns a new hash object implementing the given hash function; initializing the hash using the given string data.\n\nNamed constructor functions are also available, these are much faster than using new():\n\nmd5(), sha1(), sha224(), sha256(), sha384(), and sha512()\n\nMore algorithms may be available on your platform but the above are guaranteed to exist. See the algorithms_guaranteed and algorithms_available attributes",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._hashlib",
        "name": "_hashlib",
        "namespace": null,
        "value": [
          {
            "id": "python;hashlib",
            "kind": "module",
            "repr": "hashlib",
            "type": "module",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_hexlify",
      "insert": "_hexlify",
      "hint": "function",
      "documentation_text": "b2a_hex(data) -\u003e s; Hexadecimal representation of binary data.\n\nThis function is also available as \"hexlify()\".",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._hexlify",
        "name": "_hexlify",
        "namespace": null,
        "value": [
          {
            "id": "python;binascii.hexlify",
            "kind": "function",
            "repr": "binascii.hexlify",
            "type": "builtin_function_or_method",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_pi",
      "insert": "_pi",
      "hint": "float",
      "documentation_text": "The mathematical constant π = 3.141592..., to available precision.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._pi",
        "name": "_pi",
        "namespace": null,
        "value": [
          {
            "id": "python;",
            "kind": "instance",
            "repr": "float",
            "type": "float",
            "type_id": "python;__builtin__.float"
          }
        ]
      }
    },
    {
      "display": "_random",
      "insert": "_random",
      "hint": "module",
      "documentation_text": "Module implements the Mersenne Twister random number generator.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._random",
        "name": "_random",
        "namespace": null,
        "value": [
          {
            "id": "python;_random",
            "kind": "module",
            "repr": "_random",
            "type": "module",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_sin",
      "insert": "_sin",
      "hint": "function",
      "documentation_text": "Return the sine of x radians.",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._sin",
        "name": "_sin",
        "namespace": null,
        "value": [
          {
            "id": "python;math.sin",
            "kind": "function",
            "repr": "math.sin",
            "type": "builtin_function_or_method",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_sqrt",
      "insert": "_sqrt",
      "hint": "function",
      "documentation_text": "Return the square root of x .",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._sqrt",
        "name": "_sqrt",
        "namespace": null,
        "value": [
          {
            "id": "python;math.sqrt",
            "kind": "function",
            "repr": "math.sqrt",
            "type": "builtin_function_or_method",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_test",
      "insert": "_test",
      "hint": "function",
      "documentation_text": "",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._test",
        "name": "_test",
        "namespace": null,
        "value": [
          {
            "id": "python;random._test",
            "kind": "function",
            "repr": "random._test",
            "type": "function",
            "type_id": "python;"
          }
        ]
      }
    },
    {
      "display": "_test_generator",
      "insert": "_test_generator",
      "hint": "function",
      "documentation_text": "",
      "documentation_html": "",
      "symbol": {
        "id": "python;random._test_generator",
        "name": "_test_generator",
        "namespace": null,
        "value": [
          {
            "id": "python;random._test_generator",
            "kind": "function",
            "repr": "random._test_generator",
            "type": "function",
            "type_id": "python;"
          }
        ]
      }
    }
  ]
}